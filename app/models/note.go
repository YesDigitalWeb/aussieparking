package models

import "github.com/jinzhu/gorm"

type Note struct {
	Base
	OrderId               uint64
	UserId                uint64
	ChangedAmount         float64
	OriginalChangedAmount float64
	State                 string
	Note                  string `sql:"size:102400"`
	AutoGenerated         bool
}

func (note *Note) BeforeSave(tx *gorm.DB) (err error) {
	change := sub(note.ChangedAmount, note.OriginalChangedAmount)
	if change != 0 {
		var order Order
		if err = tx.First(&order, note.OrderId).Error; err != nil {
			return
		}

		// Heads-up: PayPal discount value is negative but note is not.
		//           Use a negative changed amount to give discount;
		//           and positive amount to charge extra money.
		order.DiscountValue = add(order.DiscountValue, change)
		if err = tx.Model(&order).UpdateColumn(map[string]interface{}{
			"discount_value": order.DiscountValue,
			"amount":         add(order.Amount, change),
		}).Error; err != nil {
			return
		}
	}
	note.OriginalChangedAmount = note.ChangedAmount
	return
}
